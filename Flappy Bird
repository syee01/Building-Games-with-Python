import pygame
import random

from pygame import mixer
#SCORE
#MUSIC
#GAME OVER

#initialize the module in pygame
pygame.init()

WIDTH = 500
HEIGHT = 650
screen = pygame.display.set_mode((WIDTH,HEIGHT))  # Setting the display

# background
background = pygame.image.load('background.jpg')

pygame.display.set_caption("Flappy Bird")

#bird (64 X 64) pixels
birdIMG = pygame.image.load('bird1.png')
birdX = 50
birdY = 400   
birdY_change = 0

def display_bird(x,y):
    screen.blit(birdIMG,(x,y))

#OBSTACLES
obstacle_width = 70 
obstacle_height = random.randint(100,120)
obstacle_colour = (211,253,117)
#obstacle is start from the right and move to the left and go close to 0 so make it negative 
obstacleX_change = -0.5
#ending of the screen and the rectangle gonna start from there 
obstacleX = 500
obstacleGap = 150

def display_obstacle(height):
    pygame.draw.rect(screen, obstacle_colour, (obstacleX, 0, obstacle_width,height))
    #find the remaining height after top obstacle create (500-height) 500 is the floor 
    #get the hieght of the bottom obstacle 
    bottom_obstacle_height = height + obstacleGap
    pygame.draw.rect(screen, obstacle_colour, (obstacleX,bottom_obstacle_height, obstacle_width, 550-bottom_obstacle_height))

# COLLISION DETECTION
def collision_detection (x, height, bird_y, bottom_obstacle_height):
    #check obstacle is at the same place as our bird check 50 cuz rhere is the place we draw the bird and we gonna check the ending of the bird by plus 64 because the bird has a width of 64
    if x >= 50 and x <= (50 + 64):
        #check for the height of the obstacle whather the bird is in between the gap
        if bird_y <= height or bird_y >= (bottom_obstacle_height-64):
            return True
    return False

#SCORE
score = 0 
#initialize font
score_font = pygame.font.SysFont("monospace", 30, bold =True, italic=False)
def display_score():
    SCORE = score_font.render("Score: " + str(score),True ,(255,255,255))
    screen.blit(SCORE,(10,10))

game_over_font = pygame.font.SysFont("monospace", 64, bold =True, italic=False)
def display_GO():
    SCORE = game_over_font.render("GAME OVER",True ,(128,0,0))
    screen.blit(SCORE,(WIDTH/6,HEIGHT/2-100))

startFont = pygame.font.SysFont("monospace", 30, bold =True, italic=False)
def start():
    # displays: "press space bar to start)
    display = startFont.render("PRESS SPACE BAR TO START", True, (255, 255, 255))
    screen.blit(display, (20, 200))
    pygame.display.update()


run = True
wait = True
collision = False
while run:

    screen.fill((0, 0, 0))
    # display the background image
    screen.blit(background, (0, 0))

    while wait:
        if collision :
            game_over = mixer.Sound('gameover.mp3')
            game_over.play()
            display_GO()
            SCORE = score_font.render("Score: " + str(score),True ,(255,255,255))
            screen.blit(SCORE,(300,300))
            obstacleX_change = 0
            start()# This refers to the first time the player is starting the game
        else:
            start()# This refers to the first time the player is starting the game
            
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    #game_over.stop()
            #  If we press the space bar we will exit out of the waiting while loop and start to play the game
            # we will also reset some of the variables such as the score and the bird's Y position and the obstacle's starting position
                    score = 0
                    birdY = 400
                    obstacleX = 500
                    obstacleX_change = -0.5
                    #  to exit out of the while loop
                    wait = False

            if event.type == pygame.QUIT:
                wait = False # in case we exit out make both running and waiting false
                run = False

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                birdY_change = -0.5
                
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:
                birdY_change = 0.5
                
        if event.type == pygame.QUIT:
            #  click the exit button and run become false and exit the program
            run = False

    birdY += birdY_change

    if birdY <=0:
        birdY = 0
    if birdY >= 500:
        birdY = 500

    obstacleX += obstacleX_change
    if obstacleX <= -10:
        obstacleX = 500;
        obstacle_height = random.randint(150,350)
        score_Sound = mixer.Sound('score.mp3')
        score_Sound.play()
        score+=1

    display_obstacle(obstacle_height)

    collision = collision_detection(obstacleX,obstacle_height,birdY,obstacle_height+obstacleGap)

    if collision:
        wait = True
    
    #display the bird
    display_bird(birdX,birdY)

    #display the score
    display_score()

    #update the display after each iteration of the loop
    pygame.display.update()


#Quit the program
pygame.quit()
